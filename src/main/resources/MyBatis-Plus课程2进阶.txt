MyBatis-Plus高级功能
1、逻辑删除
简介：将标识删除字段修改为被删除状态

2、自动填充
简介：自动填充新增时间或者更新时间等

3、乐观锁插件
简介：避免多用户同时更新同一条数据产生冲突的问题
取出记录时获取当前version,更新时带上version,版本正确更新成功,错误更新失败
乐观锁：适用于多读少写的场景
悲观锁：适用于多写少读的场景
配置悲观锁插件，实体类字段加上@Version注解
Wrapper不能复用，参考官网

4、性能分析插件
配置插件，需要添加运行时参数-Dspring.profiles.active=dev
p6spy

5、多租户SQL解析器
多租户概念介绍：多企业共用相同的程序和系统，并确保数据的隔离性。
隔离性实现：1、独立数据库；2、共享数据库，独立schema；3、共享数据库，共享schema，共享数据表
多租户实现（依赖分页插件）：配置分页插件
配置完成后，所有的CRUD操作都添加租户信息。
特定sql过滤，（不添加租户信息），方法1:插件中过滤
方法2:在自定义的接口上面添加@SqlParser(filter = true)注解，(3.1.1之前)添加配置mybatis-plus.global-config.sql-parser-cache: true

6、动态表名SQL解析器
业务场景：大量日志数据分表存储情景，xxx_log_201909；针对不同机构的，一个机构一张表，xxx_config_{org_id};
查询时，不能针对固定的表名，需要根据规则动态生成表名，这种情况。
动态表名的实现：依赖于分页插件中实现
注意事项：
1、如果dynamicTableName返回值为空，就不进行替换
2、5中配置的特定sql过滤规则 同样对动态表名解析器生效，即不进行动态表名替换
3、自定义的接口上面添加@SqlParser(filter = true)注解 同样对动态表名解析器生效，即不进行动态表名替换

7、SQL注入器
使用SQL注入器可以自定义通用方法，就像selectById、insert等方法；
自定义方法要加入到SQL注入器当中
实现步骤：
1、创建定义方法的类
2、创建注入器
3、在Mapper中加入自定义方法

选装件：慎用，只在mysql测试
选装件：InsertBatchSomeColumn
批量新增数据，自选字段insert；如果选择字段插入时不设置值，会插入null，不使用数据库默认值
在自定义注入器methodList中加入选装件方法，在Mapper中加入自定义方法
选装件：LogicDeleteByIdWithFill
根据id逻辑删除数据，并带字段填充功能；
配合@TableField(fill = FieldFill.UPDATE)注解使用；
逻辑删除时，顺便可以修改一些属性
选装件：AlwaysUpdateSomeColumnById
根据 ID 更新固定的那几个字段(但是不包含逻辑删除)
需要更新的字段如果不设置值，会更新为null

